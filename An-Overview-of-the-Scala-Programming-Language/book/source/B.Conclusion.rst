结论（Conclusion）
---------------------

Scala 应该算是既大又小的一门语言。

大，是指他拥有丰富的语法和类型体系，将面向对象和函数式编程模型结合在一起。因此，从某一种单一的语言类型过来的用户需要学习相应的新构造。
Scala 的多样性也主要是基于希望更接近 Java 和 C#
等传统语言的考虑，从而让这些语言的用户更容易采用。

小，则是指 Scala
建立在一套适度的，非常通用的概念基础之上，大部分源代码层面的结构都是语法糖，可以被编码所以换掉。
Scala 一体化的对象模型，可以让用户将大量基础类型及相关操作替换成 Scala
的类库中对应的结构，从而实现进一步的抽象。

Scala
提供了一整套强大的语法结构用于组件的构成、抽象和适配，目标是基于这套组件模型，语言的扩展能力足够强，使能够让用户能够很自然地通过类库和框架来实现所在领域的建模。
因此，对语言本身的扩展要求就少了，因为大部分结构都能很容易地通过类库来实现。
Scala 自身的类库和各种应用就是丰富的例子：Erlang 模式的 actor
类、任意精度的整型、Horn
子句和约束等。这些语法构造都能够像特定语言中实现的那样自然，同时又能与
Scala 无缝整合（通过扩展，进一步与 Java 实现整合）。

Scala
这种实现扩展性的方式，从某种意义上讲把做出良好设计的责任从语言的发明者转移到了使用者身上——设计出糟糕的类库和设计出糟糕的语言效果差不多了。当然，我们还是相信
Scala
的语法构造，相对于目前的主流语言，能够帮助使用者更容易设计出良好的类库。

**声明** Scala 的设计和实现，部分来自于瑞士国家基金 NFS 21-61825
项目的支持，瑞士国家竞争力中心 MICS 研究项目，欧洲 Framework 6 PalCom
项目，微软研究院，Hasler 基金会。 同时，Gilad Bracha, Craig Chambers,
Erik Ernst, Matthias Felleisen, Shriram Krishnamurti, Gary Leavens,
Sebastian Maneth, Erik Mejer, Oscar Nierstrasz, Klaus Ostermann, Didier
Rémy, Mads Torgersen, 及 Philip Wadler
等人通过活跃的、有启发性的讨论，为语言的成形做出了贡献。 Scala
邮件列表的参与者，也为语言和工具的改进提供了非常有益的反馈。
