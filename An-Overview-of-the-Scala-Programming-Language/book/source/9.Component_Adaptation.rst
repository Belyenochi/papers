组件适配（Component Adaptation）
----------------------------------

即便是抽象和构成能力很强大的组件体系，在整合不同团队开发出来的子系统的时候，也会遇到一个问题：那就是一个团队开发出来的组件，其对外接口并不一定满足想要用到他的团队的需要。举例而言，假设有个类库，包含第
5 节中的 ``GenList`` 类，可能有个使用者希望这种 ``List``
有集合的特点，提供判断成员的包含或者属于关系的操作。但这个类的设计者没考虑到这方面需求，从而在
``GenList`` 的接口中就没有设计此类操作。

可能有人说，通过继承就可以满足这种需求了，但实际上这只能涵盖使用者自己创建实例的情况。举例而言，假定这个类库本身就提供一个方法，类似于：

.. code-block:: scala

    def fromArray(xs: Array[T]): GenList[T]

继承方法是没法将 ``fromArray`` 返回的 ``GenList`` 改变成 ``SetList``
类型的。当然你也可以用工厂类
[21]（*也就是著名的《设计模式》 —— 译注*）来部分解决这一困难，但这样一来，你的整个类库结构就会变得更复杂，学习和使用成本更高，而且也解决不了
``GenList`` 其他子类的扩展问题。

这种状况一般称作外部可扩展性问题（external extensibility
problem），有文章 [28]
甚至认为正是这一问题阻碍了导致软件组件的开发无法成为成熟的工业体系，因为组件的独立开发和部署是成熟工业体系所必需的能力。

Scala 引进了一个新的概念来解决外部可扩展性问题：视图（views），允许人们通过对现有类增加新的成员和
traits 来进行扩展。

Scala 的视图实际上是隐式参数（implicit
parameters）的一种特例。隐式参数是组织复杂功能的一种有效工具，他可以帮助人们写出类似于
Haskell 的 type classes [12] 或者 C++ 意义上的 "concepts"，参见 Siek 和
Lumsdaine [43]。与 type class
不同，隐式参数的作用域是可控的，因此互相冲突（competing）的隐式参数可以在同一程序的不同部分并存。

**动机（Motivation）**\ 。
作为例子，我们先定义一个半群（semi-group）的抽象类，其中包括一个未实现的
``add`` 方法：

.. code-block:: Scala

    abstract class SemiGroup[a] {
      def add(x: a, y: a): a
    }

然后定义他的一个 ``Monoid`` 子类，包含一个 ``unit`` 成员：

.. code-block:: scala

    abstract class Monoid[a] extends SemiGroup[a] {
      def unit: a
    }

最后定义两个具体实现类：

.. code-block:: scala

    object Monoids {
      object stringMonoid extends Monoid[String] {
        def add(x: String, y: String): String = x.concat(y)
        def unit: String = ""
      }
      object intMonoid extends Monoid[int] {
        def add(x: Int, y: Int): Int = x + y
        def unit: Int = 0
      }
    }

这样，我们就可以定义一个 ``sum`` 方法，他对所有的 ``monoids``
都生效，普通的 Scala 写法可以是这样：

.. code-block:: scala

    def sum[a](xs: List[a])(m: Monoid[a]): a =
      if (xs.isEmpty) m.unit
      else m.add(xs.head, sum(xs.tail)(m))

调用这个方法的时候如下所示：

.. code-block:: scala

    sum(List("a", "bc", "def"))(Monoids.stringMonoid)
    sum(List(1, 2, 3))(Monoids.intMonoid)

这样的写法肯定没问题，但是还不够好，因为每次调用的时候，都必须把具体实现类传递进去。我们肯定希望系统能自动判断合适的参数类型，就像前面所看到的类型参数自动推断一样，这就是隐式参数的作用。

隐式参数：基础（Implicit Parameters: The Basics）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

下面这段代码对 ``sum`` 略微改写了一下，引入了一个隐式参数：\ ``m``

.. code-block:: scala

    def sum[a](xs: List[a])(implicit m: Monoid[a]): a =
      if (xs.isEmpty) m.unit
      else m.add(xs.head, sum(xs.tail))

从这里可以看出，一个方法可以既有普通参数又有隐式参数，不过需要说明的是，一个方法或构造函数，只能有一个隐式参数，而且必须放在声明的最后。

``implicit`` 关键字还可以用来修饰定义或声明，例如：

.. code-block:: scala

    implicit object stringMonoid extends Monoid[String] {
      def add(x: String, y: String): String = x.concat(y)
      def unit: String = ""
    }
    implicit object intMonoid extends Monoid[int] {
      def add(x: Int, y: Int): Int = x + y
      def unit: Int = 0
    }

隐式参数的核心思想在于方法调用时对应的参数可以不用传递，当对应隐式参数的变量不存在时，Scala
编译器会对其进行自动推断。

一个类型标识符能够传递给类型 ``T``
的隐式参数，需要符合隐式参数的类型定义，同时还要满足如下两个条件之一：

1. 该标识符必须在方法调用点可直接访问，无需任何前缀，包括：本地定义、在包含当前位置的作用域中定义、从父类继承而来或在由
   ``import`` 关键字导入的其他对象中定义。

2. 该标识符定义在一个对象 ``C`` 中，其同名类（名为 ``C`` 的类）是类型
   ``T`` 的父类，这种对象叫做 ``T`` 的“伴生对象”（companion object）。

上述标准在保证了隐式参数具有一定的局部性，例如：调用者可以通过选择
``import`` 不同的对象来调整传递给隐式参数的标识符定义的范围。

如果同时存在多个与隐式参数类型相匹配的参数值，Scala
编译器会按照标准的静态重载的解析方式找到一个合适的，例如：假定

.. code-block:: scala

    sum(List(1, 2, 3))

这条语句的语境中，\ ``stringMonoid`` 和 ``intMonoid``
都是可见的，由于sum的类型参数 ``a`` 必须是 ``Int``\ ，而适合
``Monoid[Int]`` 类型的隐式参数定义的只有
``intMonoid``\ ，所以这个对象会被传递给隐式参数。

上述讨论也说明了隐式参数的推断是在所有类型参数推断之后才能完成的。

隐式方法定义自身也可以带有隐式参数，下面这个方法是 ``scala.List``
中定义的一个方法，将列表类型注入（injects）到一个 ``scala.Ordered``
类中，前提是列表的元素也能转化为对应的 ``Ordered`` 类型。

.. code-block:: scala

    implicit def list2ordered[a](x: List[a])
                                (implicit elem2ordered: a => Ordered[a]): Ordered[List[a]] =
      ...

如果再定义一个方法将一个整数注入到 ``Ordered`` 类中：

.. code-block:: scala

    implicit def int2ordered(x: int): Ordered[int]

我们就可以对一个可排序列表定义一个 ``sort`` 方法：

.. code-block:: scala

    def sort(xs: List[a])(implicit a2ord: a => Ordered[a]) = ...

这样一来，我们可以对一个整数列表的列表：\ ``yss: List[List[int]]``\ 进行排序了：

.. code-block:: scala

    sort(yss)

Scala编译器会自动推断并传递两个嵌套的隐式参数，完成这一调用

.. code-block:: scala

    sort(yss)((xs: List[int]) => list2ordered[int](xs)(int2ordered)) 

将隐式参数传递给隐式参数的能力存在个问题，就是有可能导致无穷递归。比如，人们可能想要定义这样一个方法，能将任意类型注入到
``Ordered`` 类中：

.. code-block:: scala

    def magic[a](x: a)(implicit a2ordered: a => Ordered[a]): Ordered[a] = 
      a2ordered(x)

这样的功能未免也太理想了，当然不可能实现。实际上，如果一个 ``arg``
类型本身没有注入到 ``Ordered`` 类的另一个具体实现，则对其调用 ``sort``
方法会导致无穷展开：

.. code-block:: scala

    sort(arg)(x => magic(x)(x => magic(x)(x => ... )))

为了避免这种无穷展开，我们要求每一个隐式参数的定义必须是“收缩”的（contractive）：一个方法定义是\ *收缩的*\ 是指它的每个隐式参数都被一个类型“真包含”
(properly contained)
[35]，这个类型由该方法去掉所有隐式参数之后剩余的部分转换为一个函数类型所得。例如
``list2ordered`` 方法的类型是：

.. code-block:: scala

    (List[a])(implicit a => Ordered[a]): Ordered[List[a]]

这个类型是收缩的，因为其隐式参数的类型 ``a => Ordered[a]``
是被去掉隐式参数的方法 ``List[a] => Ordered[List[a]]``
的类型所真包含的。

上面提到的 ``magic`` 方法的类型是

.. code-block:: scala

    (a)(implicit a => Ordered[a]): Ordered[a]

这个类型就不是收缩的，因为他的隐式参数类型：\ ``a => Ordered[a]``\ ，和去掉隐式参数之后的方法是一样的。（*参见节末译注*）

视图（Views）
~~~~~~~~~~~~~

视图是类型之间的隐式转换，一般用来为已经存在的类型增加新的功能。例如，下面这个表示一般集合的
trait：

.. code-block:: scala

    trait Set[T] {
      def include(x: T): Set[T]
      def contains(x: T): boolean
    }

一个从 ``GenList`` 到 ``Set`` 的视图是通过下面的方法定义的：

.. code-block:: scala

    implicit def listToSet[T](xs: GenList[T]): Set[T] =
      new Set[T] {
        def include(x: T): Set[T] =
          xs prepend x
        def contains(x: T): boolean =
          !isEmpty && (xs.head == x || (xs.tail contains x))
      }

如果 ``xs`` 是 ``GenList[T]``\ ，那么 ``listToSet(xs)`` 将返回一个
``Set[T]``\ 。

视图与普通方法的唯一区别就是 ``implicit``
关键字，这使视图可以称为隐式参数的候选值，并且作为隐式转换被自动插入。

如果 ``e`` 是一个类型为 ``T`` 的表达式，下述两种情况下，\ ``e``
将被自动进行隐式转换：目标类型不是 ``T`` 或者 ``T``
的父类，或者e的一个被选中成员不是 ``T`` 的成员。例如：一个
``GenList[T]`` 类型的 ``xs`` 出现在如下的语句中：

.. code-block:: scala

    val s: Set[T] = xs;
    xs contains x

编译器会自动将上述定义的 view 插入到这两个语句：

.. code-block:: scala

    val s: Set[T] = listToSet(xs);
    listToSet(xs) contains x

那么，如果决定使用哪个视图呢？Scala
语言采用与隐式参数的传递同样的规则：一个视图必须可在当前语句被无需前缀的访问，或者在转换的源类型/目标类型之一的伴生对象中进行过定义。
视图如果可以映射到一个表达式中合适的类型，或者其中任何类型包含的可选成员，则可以被应用于这个表达式。
在所有的可应用视图中，Scala 会挑选一个最明确的，明确性的判定与 Java 和
Scala 中对于重载的解析规则是一样的。
如果找不到可应用的视图或者所有可选视图中不存在最明确的，将会产生一个错误。

视图在 Scala 的类库中使用频率很高，主要用于将 Java
的类型进行升级，以支持 Scala 的 traits。例如：Scala 中的 ``Ordered``
这个 trait 定义了一整套用于比较的操作，\ ``Scala.Predef`` 中定义了将所有
Java 基本类型以及 String 转换到这个 trait 的方法。由于任何 Scala
程序都隐含地 ``import``
这个模块的所有成员，因此这些视图是始终可见的。从用户的角度看，基本上可以认为上述
Java 类都通过这个 trait 实现了扩展。

视图界定（View Bounds）
~~~~~~~~~~~~~~~~~~~~~~~

如前所示，我们看到视图方法在被插入时上必须是静态可见的。
实际上，视图如果能够抽象地定义，其作用应该会更大，而通过将 view
也变成一个隐式参数就可以实现这一点了。如下例所示的 ``maximum``
方法，返回任意非空列表的最大元素：

.. code-block:: scala

    def maximum[T](xs: List[T])(implicit t2ordered: T => Ordered[T]): unit = {
      var mx = xs.head
      for (val x <xs.tail) if (mx < x) mx = x
      mx
    }

这个 ``maximum`` 函数可以作用于任何 ``List[T]``\ ，前提是 ``T``
可以通过视图转换为
``Ordered[T]``\ ，作为特例，这个方法可以作用于任何基本类型的列表，因为标准的
``Ordered`` 视图已经定义好了。

注意到 ``maximum`` 方法对类型 ``T`` 的两个值 ``mx`` 和 ``x``
使用一个比较操作符 ``(mx < x)``\ ，虽然类型 ``T``
本身并没有定义这个操作符 ``<``\ ，由于隐式参数 ``t2ordered`` 将 ``T``
映射到一个拥有此操作符的类型，因此这个比较操作被重写为\ ``(t2ordered(mx) < x)``\ 。

在 Scala 中，这种将一个泛型参数绑定到隐式视图的场景非常多，以至于 Scala
专门为此设计了相应语法：一个由视图界定（view bounded）的类型参数，形如
``[T <% U]``\ ，是指参数 ``T`` 必须有一个对应的视图，将其映射到类型
``U``\ 。使用视图界定的方式，\ ``maximum`` 函数的写法可以更加简化：

.. code-block:: scala

    def maximum[T <% Ordered[T]](xs: List[T]): unit = ...

这个写法实际上将会被精确地展开成为前面的代码。

--------------

*本文没有给出收缩的定义，也因此没有上述类型为什么是/不是收缩的解释，有兴趣可以参考
[35]，也就是 《The Scala Language
Specification》，里面有一段内容和上面非常接近，但增加了 properly
contained 的解释。*

*有意思的是，至少在 2.9 及以后版本的 The Scala Language Specification
中，关于 contractive、properly contained 等概念直接被去掉了，用一套
Scala 编译器的行为描述所替代，幸好我手里还有旧版本（2.6）才能印证原文的引用。这说明 Scala
\ 在文档完善方面的力度还是很大的，而且方向是脱离过于理论化的色彩，注重对计算机层面构造的阐述。为此，也建议大家如果要了解 Scala 语言最新发展，最少还是从 2.9 文档开始。（我印象里 Scala
语言/规范层面的大规模重构是从 2.8 开始的）*

*\ —— 译注*

-------------
