构成（Composition）
---------------------

解释了 Scala 的类型抽象体系之后，本节主要描述类的构成方式。Scala 的基于混入的类构
成（mixin class composition）体系是 Brach [6] 中的面向对象的线性混入构成（linear 
mixin compostion）和 [14、25] 中提出的更加对称的混入模块（mixin modules），以及 
traits [42] 这三者的融合。我们先看一个例子，如下这个迭代器的抽象描述：

.. code-block:: scala

    trait AbsIterator[T] {
      def hasNext: boolean
      def next: T
    }

注意上面出现的关键字 ``trait``\ 。Trait 是一种特殊的抽象类，它的构造方法没有任何
值参数。Traits 可以出现任何抽象类可以出现的地方，但反之不然，只有 traits 可以用于
混入。下面，我们用一个 ``trait`` 继承自 ``AbsIterator``\ ，并增加一个方法 ``foreach``\ ，
用于将一个函数作用于该迭代子返回的每一个元素上。

.. code-block:: scala

    trait RichIterator[T] extends AbsIterator[T] {
      def foreach(f: T => unit): unit =
        while (hasNext) f(next)
    }

下面是一个具体的迭代子类定义，用于连续返回一个字符串的每一个字符：

.. code-block:: scala

    class StringIterator(s: String) extends AbsIterator[char] {
      private var i = 0
      def hasNext = i < s.length
      def next = { val x = s charAt i; i = i + 1; x }
    }

**混入式类构成（Mixin-class composition）** 。下面我们将 ``RichIterator`` 和 
``StringIterator`` 的功能合并在一个类中。只有单根继承和接口的情况下这是不可能的，
因为这两个类都有具体的实现代码。因此，Scala 提供了混入式类构成的机制，使程序设计
者可以重用一个类的增量内容，也就是非继承的内容。这种机制使人可以将 ``RichIterator`` 
和 ``StringIterator`` 合并，在如下所示的例子将一个字符串的所有字母打成一列。

.. code-block:: scala

    object Test {
      def main(args: Array[String]): unit = {
        class Iter extends StringIterator(args(0))
                      with RichIterator[char]
        val iter = new Iter
        iter foreach System.out.println
      }
    }

``Iter`` 类通过 ``RichIterator`` 和 ``StringIterator`` 这两个父类型混入构成，第一
个父类型仍然称为超类（superclass），第二个父类型则称为混入（mixin）。

**类的全序化（Class Linearization）** 。 混入式类构成是多重继承的一种形式，因此也
会面临单继承所没有的问题。最典型的就是：如果多个父类型定义了同名的成员，哪一个成
员被继承？调用父类方法时那一个成员被引用？如果一个类从多个路径被继承了怎么办？在 
Scala 中，解决这些问题的基础构造就是类的全序化（class linearization）。（*linearization 可以翻成线性化或者全序化，在计算机领域一般取后者。另外，后面大部分
情况下用 “全序” 来替代，表示全序化的结果 —— 译注*）

一个类 *C* 所直接继承的类形成的可递闭包当中所有类称为 *C* 的基类（base classes）。
由于有混入类，一个类与它的基类之间的继承关系，构成一个有向无环图（directed acyclic graph）。
\ *C* 的全序 *L(C)* 是 *C* 的所有基类的一个全排序（total order），根据如下规则
构成：假设 *C* 的定义为：

.. code-block:: scala

    class C extends B0 with ... with Bn { ... } .

这个全序以 *C* 的基类 *B0* 的全序为最后一部分，前面是 *B1* 的全序（排除掉已
经包含在 *B0* 的全序当中的类），再前面是 *B2, ..., Bn*\ ，同样排除掉前面已经
出现过的类。最前面的是类 *C* 本身，作为这个全序的头一个类。例如，\ ``Iter`` 类
的全序是：

.. code-block:: scala

    { Iter, RichIterator, StringIterator, AbsIterator, AnyRef, Any }

类的全序对于类的继承关系而言是一种改进：如果一个类 *C* 是 *D* 的子类，则在任
何同时继承 *C* 、\ *D* 的类的全序中，\ *C* 永远出现在 *D* 之前。全序化还
满足另一个性质：一个类的全序永远包括其基类的全序作为后缀。例如，\ ``StringIterator`` 
的全序化：

.. code-block:: scala

    { StringIterator, AbsIterator, AnyRef, Any }

就是其子类 ``Iter`` 的全序的后缀。不过对于混入类，这个性质并不成立，一个混入类的
全序当中的类，在其子类的全序当中可能以不同的顺序出现，也就是说，Scala 中全序化不
是单调（monotonic [1]）的。

**成员（Membership）** 。如前所示，\ ``Iter`` 类从 ``StringIterator`` 和 ``RichIterator`` 
同时继承了类成员（members）。简单而言，一个类以混入构成方式继承 *Cn* **with**\ …\ **with** *C1*\ ，
将会继承其中所有类的成员，同时还可以自定义新的成员。由于 Scala 保留了 Java 和 C# 
的静态重载机制，因此可能从父类继承同名的方法，也可以再定义同名的方法 [#]_。为了判断类 
*C* 的一个方法到底是覆盖父类中的同名方法，还是这两个方法并存——即重载的关系，Scala 
采用了匹配（matching）法，这也是 从 Java 和 C# 中类似的概念衍生来的：简单地说，如
果两个类成员同名，并且具有相同的参数类型（如果两个都是方法），就称之为相匹配。

一个类的成员总共两种类型——具体和抽象的，每种类型分别对应一个判定规则：

- 一个类 *C* 的具体成员是指其或其父类的所有具体声明 *M*\ ，除非在其某个父类
  （也就是在 *L(C)* ）中已有一个匹配的具体成员。
- 一个类 *C* 的抽象成员是指其或其父类的所有抽象声明 *M*\ ，除非在 *C* 中已有一
  个匹配的具体成员，或者其某个父类（也就是在 *L(C)* ）中有一个匹配的抽象成员。

这些规则同样决定了一个类 *C* 与其父类之间匹配成员的覆盖关系。首先，具体成员一定
覆盖抽象成员。其次，如果 *M* 和 *M’* 同为具体成员或抽象成员，且 *M* 在 *C* 
的全序化当中出现在 *M’* 之前，则 *M* 覆盖 *M’*\ 。

**父类调用（Super Calls）** 。我们考虑设计一个同步迭代器，也就是其操作在多线程之
间是互斥的。 

.. code-block:: Scala

    trait SyncIterator[T] extends AbsIterator[T] {
      abstract override def hasNext: boolean = synchronized(super.hasNext)
      abstract override def next: T = synchronized(super.next)
    }

想要构造一个针对 ``String`` 的 Rich ``SyncIterator``\ ，可以用这三个类构成：

.. code-block:: Scala

    StringIterator(someString) with RichIterator[char] with SyncIterator[char]

这个构成类从 ``SynchIterator`` 继承了 ``hasNext`` 和 ``next``\ ，这两个方法都是对
其父类的相应方法调用加了一个 ``sychronized()`` 包装。 由于 ``RichIterator`` 和 
``SyncIterator`` 定义的方法相互不重合（*原文是 ``RichIterator`` 和 
``StringIterator``\ ，应该有误 —— 译注*），因此它们出现在 mixin 中的顺序没有影响，即上例写
成这样也是等价的：

.. code-block:: Scala

    StringIterator(someString) with SyncIterator[char] with RichIterator[char]

但是，这里有一个小细节要注意：在 ``SyncIterator`` 中的 ``super`` 这个调用并不是静
态地绑定到其父类 ``AbsIterator`` 上，因为显然这是毫无意义的，\ ``AbsIterator`` 定
义的 ``next`` 和 ``hasNext`` 都是抽象方法。实际上，这个 ``super`` 调用实际上指向
这个 mixin 构成中的 superclass：\ ``StringIterator`` 的相应方法。从这个意义上讲，
一个 mixin 构成的 superclass 覆盖了其各个 mixin 当中静态声明的超类。这也就意味着 
``super`` 调用在一个类当中无法被静态解析，必须延迟到一个类被实例化或被继承的时候
才能解析出来。这一概念有如下精确定义： 

假设 *C* 是 *D* 的父类，在 *C* 当中的表达式 **super**.*M* 应该能够静态解析为 *C* 的
某个父类当中的成员 *M*\ ，这样才能保证类型正确。而在 *D* 的语境中，这
个表达式应该表示一个与 *M* 相匹配的 *M'*\ ，这个成员应该在 *D* 的全序当中位
于 *C* 之后的某个类里定义。

最后注意一点：在 Java 或 C# 等语言中，上述 ``SyncIterator`` 当中的这种 ``super`` 
调用明显是不合法的，因为它会被指派为父类当中的抽象成员（方法）。如同我们在上面看
到的，这种构造在 Scala 中是合法的，只要保证一个前提，那就是这个类所出现的语境当中，
其 ``super`` 调用所访问的父类成员必须是具体定义了的。这一点是由 ``SyncIterator`` 
当中的 ``abstract`` 和 ``override`` 这两个关键字保证的。在 Scala 中，
\ ``abstract  override``\ 这两个关键字成对出现在方法定义中，表明这个方法并没有获
得完全的定义，因为它覆盖（并使用）了其父类当中的抽象成员。一个类如果有非完整定义
的成员，它自身必须是抽象类，其子类必须将这些非完整定义的成员重新定义，才能进行实
例化。

对 ``super`` 的调用可以是级联的，因此要遵从类的全序化（这是 Scala 的混入构成方式
与多重继承方式之间最主要的差异）。例如，考虑另一个与 ``SyncIterator`` 类似的类，
它将其返回的每个元素都打印到标准输出上： 

.. code-block:: Scala

    trait LoggedIterator[T] extends AbsIterator[T] {
      abstract override def next: T = {
        val x = super.next; System.out.println(x); x
      }
    }

我们可以将这两种迭代子（\ ``sychronized`` 和 ``logged``\ ）通过 mixin 组合在一起：

.. code-block:: scala

    class Iter2 extends StringIterator(someString)
                   with SyncIterator[char]
                   with LoggedIterator[char]

在这里，\ ``Iter2`` 的全序化是：

.. code-block:: Scala

    { Iter2, LoggedIterator, SyncIterator, StringIterator, AbsIterator, AnyRef, Any }

这样一来，\ ``Iter2`` 的 ``next`` 方法继承自 ``LoggedIterator``\ ，而该方法中的 
``super.next`` 则指向 ``SyncIterator`` 的 ``next`` 方法，而后者当中的 ``super.next`` 
则最终引用 ``StringIterator`` 的 ``next`` 方法。 如果想对记录日志的动作进行同步，
仅需要把两个 mixin 的顺序反过来即可实现：

.. code-block:: Scala

    class Iter2 extends StringIterator(someString)
                   with LoggedIterator[char]
                   with SyncIterator[char]

无论哪种情况， ``Iter2`` 的 ``next`` 方法当中 ``super`` 的调用都遵循其全序当中的
父类顺序。

面向服务的组件模型（Service-Oriented Component Model）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在 Scala 中，类的抽象与构成机制可以被视作面向服务的组件模型的基础。软件组件是一个
个有明确定义的，提供特定服务的计算单元。一般而言，一个软件组件并不是完全自含的，
也就是说它的实现依赖于其他一系列提供相应服务的组件。

在 Scala 中，软件组件即对应着类和 trait，类和 trait 的具体成员相当于他们获得的服
务，抽象成员相当于他们所需要的服务。组件的组合通过混入的方式来实现，从而使得开发
者可以通过较小的组件来产生较大的组件。

Scala 的基于混入的构成机制通过名称来识别服务，举例而言，一个抽象方法 **m**\ ，可
以被任何一个定义了方法 **m** 的类 *C* 来实现，只需要将类 *C* 进行混入即可。
Scala 的组件构成机制通过这种方式将需要实现的服务与服务的提供者自动结合起来，再加
上 “类的具体成员总是覆盖抽象成员” 这一规则，Scala 就形成了一套递归的、插件式的组
件机制，使得组件服务不需要显式进行组装。

上述机制可以简化大型的、存在大量递归依赖关系的组件之间的集成，并且能够有效保证（
性能方面的）可扩展性，因为服务与调用者之间的结合是依靠编译器来推断的。这一机制与
传统的黑盒式组件相比，最大好处是每个组件都是可扩展的实体：通过集成、重载而实现进
化，并且可以对已有组件增加新服务或升级现有服务。总体来说，这些特性有效地支持了一
种平滑的、渐进式的软件演进过程。

--------------

.. [#] 有人可能反对这种设计方式，认为这样太复杂，但是为了保证互操作性，这样做是必须的，例如一个 Scala 类继承一个 Java ``Swing`` 类的时候。
