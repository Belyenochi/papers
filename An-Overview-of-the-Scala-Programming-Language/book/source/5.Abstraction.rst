抽象（Abstraction）
---------------------

在组件系统中，一个重要的议题就是如何抽象所需的组件。编程语言当中有两种最主要的抽
象方式：参数化和抽象成员。前一种主要是函数式抽象方式，而后一种主要是面向对象的方
式。传统意义上，Java 对值提供函数式抽象，而对操作提供面向对象的抽象。Java 5.0 所
支持的泛型，对类型也提供了一定的函数式抽象。 Scala 对于值和类型提供上述两者抽象模
式的统一支持，值和类型都可以作为参数，也可以作为抽象成员。本节对这两种模式进行讨
论，并且对 Scala 类型系统的很大一部分进行回顾。

函数式抽象（Functional Abstraction）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

下面这个类定义了一个可以读取和写入数值的单元（cell）：

.. code-block:: Scala

    class GenCell[T](init: T) {
      private var value: T = init
      def get: T = value
      def set(x: T): unit = { value = x }
    }

这个类用一个类型参数 ``T`` 抽象了 cell 的值的类型，因此我们称 ``GenCell`` 为\ *泛型*\ 
（\ *generic*\ ）。 与类相近，方法也可以有类型参数，下面这个 ``swap`` 方法交换两个
\ cell 的内容，只要它们包含的值类型相同：

.. code-block:: Scala

    def swap[T](x: GenCell[T], y: GenCell[T]): unit = {
      val t = x.get; x.set(y.get); y.set(t)
    }

下面这段程序创建两个整数单元，并且交换它们的值：

.. code-block:: Scala

    val x: GenCell[int] = new GenCell[int](1)
    val y: GenCell[int] = new GenCell[int](2)
    swap[int](x, y)

参数的实际类型用方括号括起来，用于替代类和方法定义中的形式参数。Scala 定义了一套
复杂的类型推理（type inference）系统，使得这两种情况下参数的实际类型都可以省略。
类的方法和构造函数的类型参数对应的实际类型，可以通过局部类型推理（local type 
inference [41, 39]）根据预期的返回值以及参数类型推理出来。因此，上面的程序可以写
成这种省略参数类型的方式：

.. code-block:: Scala

    val x = new GenCell(1)
    val y = new GenCell(2)
    swap(x, y)

**参数限定（Parameter bounds）。** 考虑这样一个方法：\ ``updateMax``\ ，它将一个 
cell 的值设置为其当前值与一个给定值之间较大的那个。我们希望这个函数能够作用于所
有的 cell 类型，只要其值类型能够按照一个特征 ``trait Ordered`` 定义的 “\ ``<``\ ” 
操作符进行比较。目前假定这个特征定义如下（更精确的定义在 Scala 标准类库中）：

.. code-block:: Scala

    trait Ordered[T] {
      def < (x: T): boolean
    }

这样，\ ``updateMax`` 方法可以通过如下方式进行泛型定义，其中使用到的方法称为限定
多态（Bounded polymorphism）：

.. code-block:: Scala

    def updateMax[T <: Ordered[T]](c: GenCell[T], x: T) =
      if (c.get < x) c.set(x)

这里，类型参数定义子句 ``[T <: Ordered[T]]`` 引入了受限类型参数 ``T``\ ，它限定参
数类型 ``T`` 必须是 ``Ordered[T]`` 的子类型。这样，“\ ``<``\ ” 操作符就可以应用于
类型为 ``T`` 的参数了。同时，这个例子还展现出一个受限参数类型本身可以作为其限定类
型的一部分，也就是说 Scala 支持 F-受限多态（F-bounded polymorphism [10]）。

**协变性（Variance）。** 泛型和子类型（subtyping）组合在一起产生这样一个问题：它
们如何相互作用。如果 ``C`` 是一个类型构造子（type constructor），\ ``S`` 是 ``T`` 
的一个子类，那么\ ``C[S]`` 是不是也是 ``C[T]`` 的子类呢？我们把有这种特性的类型构
造子称为协变的（covariant）。可以看出 ``GenCell`` 这个类型构造子显然不是协变的，
否则的话，下面这段代码就是合法的，但实际上它将会在运行时抛出错误：

.. code-block:: Scala

    val x: GenCell[String] = new GenCell[String]("abc")
    val y: GenCell[Any] = x; // illegal!
    y.set(1)
    val z: String = y.get

``GenCell`` 中的可变（mutable）变量使其无法成为协变的。实际上，\ ``GenCell[String]`` 
不是 ``GenCell[Any]`` 的子类，因为有些可以针对 ``GenCell[Any]`` 的操作不能应用于 
``GenCell[String]``\ ，例如将其设置一个整型值。 另一方面，对于不可变数据类型，构
造子的协变性是很自然成立的。例如：一个不可变的整数列表自然可以被看做是一个 ``Any`` 
列表的特例。此外，在另一些情况下我们正好需要逆协变性（contravariance），例如一个
输出管道 ``Chan[T]``\ ，有一个以 ``T`` 为类型参数的写操作，我们自然希望对于所有 
``T <: S``\ ，都有 ``Chan[S] <: Chan[T]``\ 。

Scala 允许通过 “\ ``+/-``\ ” 定义类型参数的协变性，用 “\ ``+``\ ” 放在类型参数前
表示构造子对于该参数是协变的，“\ ``-``\ ” 则表示逆协变，没有任何符号则表示非协变。

下面的 ``GenList`` 定义了一个协变的列表，包含 ``isEmpty``\ 、\ ``head`` 和 ``tail`` 
等三个方法。

.. code-block:: Scala

    abstract class GenList[+T] {
      def isEmpty: boolean
      def head: T
      def tail: GenList[T]
    }

Scala 的类型系统通过跟踪类型参数的每一次使用来确保协变性确实成立。这些使用位置被
分为几类：出现在不可变字段和方法返回结果被认为是协变的；出现在方法参数和类型参数
上界时被认为是逆协变的；非协变的类型参数永远出现在非协变的位置；在一个逆协变类型
参数的内部，协变与逆协变是反转的。类型系统保证协变（逆协变）的类型参数总是出现在
协变（逆协变）的位置上。 下面是 ``GenList`` 的两个实现：

.. code-block:: Scala

    object Empty extends GenList[Nothing] {
      def isEmpty: boolean = true
      def head: Nothing = throw new Error("Empty.head")
      def tail: GenList[Nothing] = throw new Error("Empty.tail")
    }
    class Cons[+T](x: T, xs: GenList[T]) extends GenList[T] {
      def isEmpty: boolean = false
      def head: T = x
      def tail: GenList[T] = xs
    }

注意：\ ``Empty`` 对象代表一个空列表，其元素可以是任何类型。这一点就是由协变性保
证的，因为 ``Empty`` 的类型是 ``GenList[Nothing]``\ ，对于任何T而言，它都是 
``GenList[T]`` 的子类型。

**二元操作和参数下界（Binary methods and lower bounds）。** 迄今为止，我们一直将
协变性与不可变数据结构联系在一起，然而由于二元操作（Binary methods，就是指一个对
象的方法，其参数类型也是这个对象类型，例如：\ ``x + y`` 这种 —— 译注）的存在，这
种做法并不完全正确。例如，为 ``GenList`` 类增加一个 ``prepend``\ （前追加）方法，
最自然的做法是将其定义成为接收一个相应的 list 元素类型参数：

.. code-block:: Scala

    abstract class GenList[+T] { ...
      def prepend(x: T): GenList[T] = // illegal!
        new Cons(x, this)
    }

可惜这样做会导致类型错误，因为这种定义使得 ``T`` 在 ``GenList`` 中处于逆协变的位
置，从而不能标记为协变参数（\ ``+T``\ ）。这一点非常遗憾，因为从概念上说不可变的 
list 对于其元素类型而言应该是协变的，不过这个问题可以通过参数下界对 ``prepend`` 
方法进行泛化而解决：

.. code-block:: Scala

    abstract class GenList[+T] { ...
      def prepend[S >: T](x: S): GenList[S] = // OK
        new Cons(x, this)
    }

这里 ``prepend`` 是一个多态方法，接收 ``T`` 的某个父类型 ``S`` 作为参数，返回元素
类型为 ``S`` 的list。这个定义是合法的，因为参数下界被归类为协变位置，从而 ``T`` 在 
``GenList`` 中只出现在协变位置上。

**与通配符模式相比较（Comparison with wildcards）。** Java 5.0 中可以提供一种通过
通配符标记协变性的方法 [45]，这种模式本质上是 Igarashi 和 Viroli 提出的可变类型参
数 [26] 的一种语法变体。与 Scala 不同的是，Java 5.0 的标注是针对类型表达式而不是
类型定义。例如：在每一个需要用到协变的 generic list 的时候，都将其声明为 
``GenList<? extends T>``\ ，这是一个类型表达式，表示其所声明的对象实例的所有元素
都是 ``T`` 的子类型。 协变通配符可以用于任何类型表达式当中，但是要注意，出现在非
协变的位置上的类型成员将会被忽略（forgotten），这对于保证类型的正确性是必须的。例
如：\ ``GenCell<? extends Number>`` 类型只有那个 ``get`` 方法（返回 ``Number`` 类
型）才有效，而其 ``set`` 方法，由于其类型参数是逆协变的，会被忽略。

在 Scala 的早期版本中，我们也实验过在调用时标注协变性的方式，类似于通配符。初看之
下，这种方式有很大的灵活性，因为一个类型的成员既可以是协变的，也可以是非协变的，
用户可以根据情况选择是不是使用通配符。但是，这种灵活性也是有代价的，因为这样作要
有用户而不是设计者来保证对协变性的使用是一致的。在实践中我们发现，调用时标注协变
性的方式很难保证一致性，经常会出现类型错误。相反，定义时标注协变性对于正确地设计
类型有很大帮助，例如可以很好地指导人们设计方法时知道哪些应当使用参数下界。另外，
Scala 的 mixin 合成（见第 6 章）可以让人很容易将一个类分成协变的和非协变的部分，
而在 Java 这种单根结构 + 接口的继承模型中，这样做是非常麻烦的。因此，Scala 的新版
本将标注协变性的方式从使用时标注改为了定义时标注。

抽象成员（Abstraction Members）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在 Scala 中，面向对象的抽象方式可以与函数式抽象起到同样的作用。例如：下例是一个以 
OO 抽象方式定义的 Cell 类型。

.. code-block:: Scala

    abstract class AbsCell {
      type T
      val init: T
      private var value: T = init
      def get: T = value
      def set(x: T): unit = { value = x }
    }

``AbsCell`` 类既没有类型参数也没有值参数，而是定义了一个抽象类型成员 ``T`` 和一个
抽象值成员 ``init``\ 。我们可以通过给出这两个成员的具体定义来对这个类型进行实例化。
例如：

.. code-block:: Scala

    val cell = new AbsCell { type T = int; val init = 1 }
    cell.set(cell.get * 2)

这里，cell 的类型是 ``AbsCell { type T = int }``\ ，也就是 ``AbsCell`` 被 
``{ type T = int }`` 细化（refinement）而形成的类型。访问 cell 值的代码认为其类
型别名 ``cell.T=int``\ ，因此上面第二条语句是合法的。

**路径依赖类型（Path-dependent types）。** 不知道 ``AbsCell`` 绑定的类型情况下，
也可以对其进行访问。下面这段代码将一个 cell 的值恢复成为其初始值（\ ``init``\ ），
而无需关心 cell 值的类型是什么。

.. code-block:: Scala

      def reset(c: AbsCell): unit = c.set(c.init)

为什么可以这样做呢？因为 ``c.init`` 的类型是 ``c.T``\ ，而 ``c.set`` 是 
``c.T => unit`` 类型的函数，因此形参与实参类型一致，方法调用是类型正确的。 ``c.T`` 
是一个路径依赖类型的例子，通常来讲，这种类型的形式是：\ *x1. ...  .xn.t*\ ，这里 
*n > 0*\ ，\ *x1, ..., xn* 是不可变的值，而 *t* 是 *xn* 的类型成员。路径依赖类型
是 Scala 的一个新颖的特性，其理论基础是 *νObj calculus* [36]。 路径依赖类型要依靠
其前缀路径的不可变性，下面给出一个违反了不可变性的例子：

.. code-block:: Scala

    var flip = false
    def f(): AbsCell = {
      flip = !flip
      if (flip) new AbsCell { type T = int; val init = 1 }
      else new AbsCell { type T = String; val init = "" }
    }
    f().set(f().get) // illegal! 

在上例中，每一次调用 ``f()`` 分别返回 ``int`` 和 ``String`` 类型的值，因此最后一
句是错误的，因为它要将 ``String`` 类型的值赋给一个 ``int`` 值的 cell。Scala 类型
系统禁止这种调用，因为 ``f().get`` 的类型是 ``f().T``\ ，而这不是一个有效类型，因
为 ``f()`` 不是一个有效路径。

**类型选择与单例类型（Type selection and singleton types）。** 在 Java 中，类型定
义可以嵌套，嵌套类型用其外部类型做前缀的形态表示。在 Scala 中，则通过 “外部类型#
内部类型”（\ ``Outer#Inner``\ ）的方式来表示，“\ ``#``\ ” 就称作类型选择（Type 
Selection）。从概念上说，这与路径依赖类型（例如：\ ``p.Inner``\ ）不同，因为 ``p`` 
是一个值，不是一个类型。进一步而言，\ ``Outer#t`` 也是一个无效表达式，如果 ``t`` 
是一个定义在 ``Outer`` 中的抽象类型的话。 实际上，路径依赖类型可以被扩展成为类型
选择，\ ``p.t`` 可以看做是 ``p.type#t``\ ，这里 ``p.type`` 就称作单例类型，仅代表 
``p`` 所指向对象的类型。单例类型本身对于支持方法调用串接很有作用，考虑如下代码：
\ ``C`` 有一个 ``incr`` 方法，对其值 ``+1``\ ，其子类 ``D`` 由一个 ``decr`` 方法，
对其值 ``-1``\ 。

.. code-block:: Scala

    class C {
      protected var x = 0
      def incr: this.type = { x = x + 1; this }
    }
    class D extends C {
      def decr: this.type = { x = x - 1; this }
    }

从而我们可以将相关调用串接起来：

.. code-block:: Scala

    val d = new D; d.incr.decr

如果没有 ``this.type`` 这个单例类型，上述调用是非法的，因为 ``d.incr`` 的类型应该
是 ``C``\ ，但 ``C`` 并没有 ``decr`` 方法。从这个意义上说，\ ``this.type`` 类似于 
Kim Bruce 的 mytype [29] 的一个协变的使用方式。

**族多态和self类型（Family polymorphism and self types）。** Scala 的抽象类型概念
非常适合于描述相互之间协变的一族（families）类型，这种概念称作族多态。例如：考虑 
publish/subscribe 模式，它有两个主要类型：subjects 和 observers。Subjects 定义了 
``subscribe`` 方法，用于给 observers 进行注册，同时还有一个 ``publish`` 方法，用
于通知所有的注册者；通知是通过调用所有注册者的 ``notify`` 方法实现的。一般来说，
当 subject 的状态发生改变时，会调用 ``publish`` 方法。一个 subject 可以有多个 observers，
一个 observer 也可以观察多个 subject。\ ``subscribe`` 方法一般用 observer 的标识
为参数，而 ``notify`` 方法则以发出通知的 subject 对象为参数。因此，这两个类型在方
法签名中都引用到了对方。 这个模式的所有要素都在如下系统中：

.. code-block:: Scala

    abstract class SubjectObserver {
      type S <: Subject
      type O <: Observer
      abstract class Subject requires S {
        private var observers: List[O] = List()
        def subscribe(obs: O) =
          observers = obs :: observers
        def publish =
          for (val obs <- observers) obs.notify(this)
      }
      
      trait Observer {
        def notify(sub: S): unit
      }
    }

顶层的 ``SubjectObserver`` 类包含两个类成员：一个用于 subject，一个用于 observer。
\ ``Subject`` 类定义了 ``subscribe`` 方法和 ``publish`` 方法，并且维护一个所有注
册的 observer 的列表。\ ``Observer`` 这个 ``trait`` 只定义了一个抽象方法 ``notify``\ 。 
需要注意的是，\ ``Subject`` 和 ``Observer`` 并没有直接引用对方，因为这种 “硬” 引
用将会影响客户代码对这些类进行协变的扩展。相反，\ ``SubjectOberver`` 定义了两个抽
象类型 ``S`` 和\ ``O``\ ，分别以 ``Subject`` 和 ``Observer`` 作为上界。\ ``Subject`` 
和 ``Observer`` 的类型分别通过这两个抽象类型引用对方。 另外还要注意，\ ``Subject`` 
类使用了一个特殊的标注 ``requires``\ ：

.. code-block:: Scala

    abstract class Subject requires S { ...

这个标注表示 ``Subject`` 类只能作为 ``S`` 的某个子类被实例化，这里 ``S`` 被称作 
``Subject`` 的 self-type。在定义一个类的时候，如果指定了 self-type，则这个类定义
中出现的所有 ``this`` 都被认为属于这个 self-type 类型，否则被认为是这个类本身。在 
``Subject`` 类中，必须将 self-type 指定为 ``S``\ ，才能保证 ``obs.notify(this)`` 
调用类型正确。 Self-type 可以是任意类型，并不一定与当前正在定义的类型相关。依靠
如下两个约束，类型正确性仍然可以得到保证：(1) 一个类型的 self-type 必须是其所有父
类型的子类，(2) 当使用 ``new`` 对一个类进行实例化时，编译器将检查其 self-type 必
须是这个类的父类。 这个 publish/subscribe 模式中所定义的机制可以通过继承 
``SubjectObserver``\ ，并定义应用相关的 ``Subject`` 和 ``Observer`` 类来使用。例
如下面的 ``SensorReader`` 对象，将传感器（sensors）作为 subjects，而将显示器
（displays）作为 observers。

.. code-block:: Scala

    object SensorReader extends SubjectObserver {
      type S = Sensor
      type O = Display
      abstract class Sensor extends Subject {
        val label: String
        var value: double = 0.0
        def changeValue(v: double) = {
          value = v
          publish
        }
      }
      
      class Display extends Observer {
        def println(s: String) = ...
        def notify(sub: Sensor) =
          println(sub.label + " has value " + sub.value)
      }
    }

在这个对象中，\ ``S`` 被 ``Sensor`` 限定，而 ``O`` 被 ``Display`` 限定，从而原先
的两个抽象类型现在分别通过覆盖而获得定义，这种 “系绳节”（“tying the knot”）在创建
对象实例的时候是必须的。当然，用户也可以再定义一个抽象的 ``SensorReader`` 类型，
未来再通过继承进行实例化。此时，这两个抽象类型也可以通过抽象类型来覆盖，如：

.. code-block:: scala

    class AbsSensorReader extends SubjectObserver {
      type S <: Sensor
      type O <: Display
      ...
    }

下面的代码演示了 ``SensorReader`` 如何使用：

.. code-block:: scala

    object Test {
      import SensorReader._
      val s1 = new Sensor { val label = "sensor1" }
      val s2 = new Sensor { val label = "sensor2" }
      def main(args: Array[String]) = {
        val d1 = new Display; val d2 = new Display
        s1.subscribe(d1); s1.subscribe(d2)
        s2.subscribe(d1)
        s1.changeValue(2); s2.changeValue(3)
      }
    }

另外值得注意的是其中的 ``import`` 语句，它使 ``Test`` 可以直接访问 ``SensorReader`` 
的成员，而无需前缀。Scala 的 ``import`` 比 Java 中用法更广泛，可以在任何地方使用，
可以从任何对象中导入成员，而不仅仅从一个 ``package`` 中。

用抽象类型建立泛型模型（Modeling Generics with Abstract Types）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一种语言里有两套抽象语法体系肯定会让人产生对这种语言复杂性的疑问：能不能就用一种
形式化体系来实现？本节当中我们将会展示，函数式的类型抽象机制（也就是泛型）实际上
可以通过面向对象的类型抽象机制（也就是抽象类型）来表达。这种表达方式的思路如下所
述： 假定一个参数化类型 ``C`` 有一个类型参数 ``t``\ （可以直接推广到多个类型参数
的情况），那么这种表达方式有四个关键组成部分：分别是类型自身的定义、类型实例的创
建、基类构造子的调用以及这个类的类型实例（type instances）。

1. 类型定义，\ ``C`` 的定义可以重写如下：

.. code-block:: scala

   class C { 
     type t
     /* rest of class */
   }


也就是说，\ ``C`` 的类型参数可以用其抽象成员来重新定义。如果类型参数有上界或者下
界，则可以带到抽象成员的定义上。类型参数的协变性则不带到抽象成员的定义上，参见第 
4 点。

2. 以 ``T`` 为参数创建实例的调用：\ ``new C[T]`` 可以写成：

.. code-block:: scala

   new C { type t = T }

3. 如果 ``C[T]`` 出现在调用基类构造符的场合，则其子类的定义将会进行如下扩充：

.. code-block:: scala

   type t = T

4. 每一个 ``C[T]`` 形式的类型定义都被扩充为如下的细化形式：

   - ``C { type t =  T }`` 如果 ``t`` 被声明为非协变
   - ``C { type t <: T }`` 如果 ``t`` 被声明为协变
   - ``C { type t >: T }`` 如果 ``t`` 被声明为逆协变

这种表达方式在一种情况下会有问题：命名冲突。这是因为参数的名称成为了类的成员，可
能和其他成员冲突，包括其父类的类型参数转化成的成员。这种冲突可以通过重命名解决，
例如给每个类型名称指定一个唯一数字标识。

两种抽象模式之间可以转换，对于一种语言还是有价值的，因为可以降低其内在的概念复杂
性。例如，Scala 的泛型，实际上就是一种语法糖，完全可以被抽象类型替代掉。既然如此，
也许会有人问，这种语法糖有没有必要性？或者说为什么不只用抽象类型呢，这样可以使语
法本身简化很多。实际上，Scala 中引入泛型有两重意义：首先，手工把泛型转化为成为抽
象类型表达形式并不那么简单，不仅会丧失语法的简洁性，而且还可能带来前述的命名冲突
等问题。其次，泛型和抽象类型在 Scala 中一般扮演不同的角色，泛型一般用于类型的实例
化，而抽象类型主要用于在调用者代码中对相应的抽象类型进行引用。后者主要来自于两个
场合：一个是有人需要在客户代码中隐藏相关类型信息，用于构造类似于SML模式的模块系统。
另一个是在子类中协变地继承父类的类型，从而获得族多态。

可能有人会问，那么是否可以反过来用泛型来替代抽象类型呢？一些对于两种抽象方式都支
持的系统进行的研究 [27] 证实，这样做要困难得多，至少整个程序都需要重写。不仅如此，
如果系统要实现受限多态的话，重写类型上/下界的部分会呈平方级增长 [8]。实际上这一点
也不奇怪，因为这两种类型体系的理论基础就不同，泛型（不带 F-界的）可以用 F\ :sub:`<:`\ 
系统来表达 [11]，而抽象类型则建立在类型依赖的基础之上。后者比前者的表现力更强，例如，
带路径依赖类型的 *νObj* 演算是可以涵盖 F\ :sub:`<:`\ 的。
