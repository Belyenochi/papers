XML 处理（XML Processing）
----------------------------

XML 是一种流行的数据结构，Scala 针对处理 XML
的程序进行了设计，使之更易于创建和维护。Scala 当中包含一些特定的 traits
和类用于构造XML的数据模型，从而可以采用模式匹配的解构方式来处理 XML
类型的数据。

数据模型
~~~~~~~~~~~~

在 Scala 中，XML 的数据模型代表一个有序无权树（ordered unranked
tree）的不可变类型，树的每一个节点有一个
label、若干子节点以及一个属性名到属性值的 map。这些结构在
``scala.xml.Node`` 这个 trait 中定义，它同时还包含了 XPath 的操作符
child 和 descendant-or-self 的定义，分别用 ``\`` 和 ``\\``
来表示，元素（elements）、文本节点（text
nodes）、注释（comments）、处理指令（processing
instructions）和实体引用（entity references）则都是它的实体子类。

Scala 的赋值语句中可以直接使用 XML 的语法：

.. code-block:: Scala

    val labPhoneBook =
      <phonebook>
        <descr>Phone numbers of<b>XML</b> hackers.</descr>
        <entry>
          <name>Burak</name>
          <phone where="work"> +41 21 693 68 67 </phone>
          <phone where="mobile"> +41 78 601 54 36 </phone>
        </entry>
      </phonebook>

上述这段代码中，\ ``labPhoneBook`` 是一个 XML
树，它的某个节点拥有一个标签为 ``phone``\ ，它的子节点又包含了一个标签为
``+41 21 ...`` 的文本节点，以及一个以 ``where`` 和 ``“work”`` 为键值对的
map。在 XML 的语法中，还可以通过 “\ ``{``\ ” 和 “\ ``}``\ ” 来转义成
Scala（与 XQuery 的约定类似），例如：一个拥有文本子节点的 ``date``
节点，就可以用 ``<date>{ df.format(new java.util.Date()) }</date>``
来表示当前日期。

模式校验（Schema Validation）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

XML 文档的类型一般通过 schema 来定义，主要的形式化 schema 类型包括
DTD、XML Scahma（也就是XSD）和 RELAX NG。目前 Scala 只提供了对 DTD
的支持，通过 dtd2scala 这一工具，通过将 DTD
转化为一系列类，这些类只能在符合该 DTD 的 XML
模型中实例化。这样就可以采用 XML 文档的一个特殊的 ``load``
方法，通过模式匹配的方式实例化相关类来针对 DTD 进行校验。未来 Scala
还将支持针对 XML Schema 的校验，包含针对普通类型的静态语法检查。

序列匹配（Sequence Matching）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Scala 支持通过模式匹配来分解 XML 节点数据，并且匹配过程扔可以使用 XML
语法，虽然只能用于匹配元素。下例展现了如何给 ``phonebook``
这个元素增加一个子项：

.. code-block:: Scala

    import scala.xml.Node
    def add(phonebook: Node, newEntry: Node): Node =
      phonebook match {
        case <phonebook>{ cs @ _* }</phonebook> =>
          <phonebook>{ cs }{ newEntry }</phonebook>
      }

    val newPhoneBook =
      add(scala.xml.XML.loadFile("savedPhoneBook"),
        <entry>
          <name>Sebastian</name>
          <phone where="work">+41 21 693 68 67</phone>
        </entry>)

上述 ``add`` 函数通过对 ``phonebook`` 元素进行匹配，将其子序列匹配到
``cs`` 这个变量（模式 “\ ``_*``\ ” 表示匹配任何序列），并构造一个新的
``phonebook`` 元素，其中 ``newEntry`` 被加在 ``cs`` 的后面。 包含了
``_*`` 的序列模式，是对第 7 节中描述的代数型模式（algebraic
patterns）的一种扩充，提供了匹配从 0
到任意数量元素的序列的能力。序列模式可以用来匹配任意序列（任何
``Seq[A]`` 类型的序列），并用于可接受序列型输入的
``case class``\ ，例如：

.. code-block:: Scala

    def findRest(z: Seq[Char]): Seq[Char] = z match {
      case Seq('G', 'o', 'o', 'g', 'l', 'e', rest@_*) => rest
    }

上面这个匹配模式用于检测以 “Google”
开头的字符串，如果输入字符串匹配，则返回剩余的部分，否则产生一个运行时错误。Scala
的上个版本还（直接）支持通用的正则表达式，不过上面介绍的这种（相对于正则表达式而言）特殊的模式已经基本能满足现实世界的绝大部分需要了，并且避免了全面支持正则表达式而需要的自顶向下的对正则树模式的检测和翻译，因为他们与
Scala 的模式语法非常不匹配。

用 For Comprehension 实现 XML 查询（XML Queries through For Comprehension）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一般的模式匹配方法，每次只能匹配一个模式，对于 XML
查询而言，我们一般希望一次把所有匹配结果都找到。Scala 灵活的
comprehension 机制，能够提供简洁而优雅的 XML 查询方式，非常接近
XQuery。如下例所示：这段代码可以将 ``labAddressbook`` 和
``labPhoneBook`` 的 ``entry`` 元素分别取到变量 ``a`` 和 ``p``
中，并且对这两个 entry 的 ``name``
元素进行比较，一旦相等，则生成一个名为 ``result`` 的 XML
元素，其中包括前者的所有子节点和后者的 ``phone``
元素，也就是地址和电话号码。

.. code-block:: Scala

    for (val a <-labAddressBook \\ "entry";
         val p <-labPhoneBook \\ "entry";
         a \ "name" == p \ "name") yield
      <result>{ a.child }{ p \ "phone" }</result>

